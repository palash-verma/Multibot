#include <Servo.h>
#define TRIGGER_PIN 4
#define ECHO_PIN    5
#define IR_1      9
#define IR_2      10

long duration, distance;
Servo armServo;

// Motor A connections
int bl1=8;
int bl2=7;
int bls=A2;
// Motor B connections
int br1=12;
int br2=13;
int brs=A0;
// Motor C connections
int fr1=10;
int fr2=11;
int frs=A3;
// Motor D connections
int fl1=5;
int fl2=4;
int fls=A1;

int irr=0;
int irl=0;

void setup()
{
  pinMode(br1, OUTPUT);
  pinMode(br2, OUTPUT);

  pinMode(bl1, OUTPUT);
  pinMode(bl2, OUTPUT);

  pinMode(fl1, OUTPUT);
  pinMode(fl2, OUTPUT);

  pinMode(fr1, OUTPUT);
  pinMode(fr2, OUTPUT);

  pinMode(brs, OUTPUT);
  pinMode(bls, OUTPUT);
  pinMode(frs, OUTPUT);
  pinMode(fls, OUTPUT);
  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  armServo.attach(2);
  pinMode(IR_1, INPUT);
  pinMode(IR_2, INPUT);
  Serial.begin(9600);

}

void loop()
{
  armServo.write(90);
  calcDist();
  
  if (distance<15){
    stopMoving();
    lookRight();
    calcDist();
    if (distance <15){
      lookLeft();
      calcDist();
      if (distance<15){
        turnAround();
      }
      else{
        turnLeft();
        LineFollow();
      }
    }
    else{
      turnRight();
      LineFollow();
    }
  }
  else LineFollow();
}

void calcDist(){
  
  
  // Send pulse to trigger pin
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);
  
  // Read the pulse on echo pin
  duration = pulseIn(ECHO_PIN, HIGH);
  
  // Calculate distance in cm
  distance = duration * 0.034 / 2;
  
  // Print distance to serial monitor
  Serial.print("Distance: ");
  Serial.println(distance);
  delay(500);
}

void lookRight(){
  delay(100);
  armServo.write(0); 
}

void lookLeft(){
  delay(100);
  armServo.write(180); 
}


void stopMoving(){
  digitalWrite(br1, LOW);
  digitalWrite(br2, LOW);

  digitalWrite(bl1, LOW);
  digitalWrite(bl2, LOW);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, LOW);
  
}

void turnLeft(){
       
  delay(500);
  
  digitalWrite(br1, LOW);
  digitalWrite(br2, LOW);

  digitalWrite(bl1, LOW);
  digitalWrite(bl2, LOW);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, LOW);
  
  delay(200);

 digitalWrite(br1, LOW);
  digitalWrite(br2, HIGH);
  
  digitalWrite(bl1, HIGH);
  digitalWrite(bl2, LOW);

  digitalWrite(fl1, HIGH);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, HIGH);

  analogWrite(brs,255);
  analogWrite(fls,255);
  analogWrite(bls,255);
  analogWrite(frs,255);

  delay(500); //this delay will decide how much the robot turns, adjust acc

  digitalWrite(br1, LOW);
  digitalWrite(br2, LOW);
  
  digitalWrite(bl1, LOW);
  digitalWrite(bl2, LOW);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, LOW);

   delay(1000);
}

void turnRight(){
       
  delay(500);
  
  digitalWrite(br1, LOW);
  digitalWrite(br2, LOW);

  digitalWrite(bl1, LOW);
  digitalWrite(bl2, LOW);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, LOW);
  
  delay(200);

 digitalWrite(br1, HIGH);
  digitalWrite(br2, LOW);
  
  digitalWrite(bl1, LOW);
  digitalWrite(bl2, HIGH);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, HIGH);

  digitalWrite(fr1, HIGH);
  digitalWrite(fr2, LOW);

  analogWrite(brs,255);
  analogWrite(fls,255);
  analogWrite(bls,255);
  analogWrite(frs,255);

  delay(500); //this delay will decide how much the robot turns, adjust acc

  digitalWrite(br1, LOW);
  digitalWrite(br2, LOW);
  
  digitalWrite(bl1, LOW);
  digitalWrite(bl2, LOW);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, LOW);

   delay(1000);
}

void left(){
    delay(100);

 digitalWrite(br1, LOW);
  digitalWrite(br2, HIGH);
  
  digitalWrite(bl1, HIGH);
  digitalWrite(bl2, LOW);

  digitalWrite(fl1, HIGH);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, HIGH);

  analogWrite(brs,255);
  analogWrite(fls,255);
  analogWrite(bls,255);
  analogWrite(frs,255);

  delay(50); //this delay will decide how much the robot turns, adjust acc

}
void right(){
  delay(100);

 digitalWrite(br1, HIGH);
  digitalWrite(br2, LOW);
  
  digitalWrite(bl1, LOW);
  digitalWrite(bl2, HIGH);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, HIGH);

  digitalWrite(fr1, HIGH);
  digitalWrite(fr2, LOW);

  analogWrite(brs,255);
  analogWrite(fls,255);
  analogWrite(bls,255);
  analogWrite(frs,255);

  delay(50); //this delay will decide how much the robot turns, adjust acc

}
void forward(){
    digitalWrite(br1, LOW);
  digitalWrite(br2, HIGH);
  
  digitalWrite(bl1, LOW);
  digitalWrite(bl2, HIGH);

  digitalWrite(fl1, HIGH);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, HIGH); 

  analogWrite(brs,255);
  analogWrite(bls,255);
  analogWrite(frs,255);
  analogWrite(fls,255);  
  
}

void turnAround(){
     delay(500);
  
  digitalWrite(br1, LOW);
  digitalWrite(br2, LOW);

  digitalWrite(bl1, LOW);
  digitalWrite(bl2, LOW);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, LOW);
  
  delay(200);

 digitalWrite(br1, HIGH);
  digitalWrite(br2, LOW);
  
  digitalWrite(bl1, LOW);
  digitalWrite(bl2, HIGH);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, HIGH);

  digitalWrite(fr1, HIGH);
  digitalWrite(fr2, LOW);

  analogWrite(brs,255);
  analogWrite(fls,255);
  analogWrite(bls,255);
  analogWrite(frs,255);

  delay(1000); //this delay will decide how much the robot turns, adjust acc

  digitalWrite(br1, LOW);
  digitalWrite(br2, LOW);
  
  digitalWrite(bl1, LOW);
  digitalWrite(bl2, LOW);

  digitalWrite(fl1, LOW);
  digitalWrite(fl2, LOW);

  digitalWrite(fr1, LOW);
  digitalWrite(fr2, LOW);

   delay(1000);
}

void LineFollow(){
  irr= digitalRead(IR_1);
  irl= digitalRead(IR_2);
  if(irr==LOW && irl==LOW)  forward();
  if(irr==HIGH  && irl==LOW)  right();
  if(irr==LOW && irl==HIGH) left();
  if(irr==HIGH && irl==HIGH)  stopMoving();
}
